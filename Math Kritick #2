{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4720c403-8f3f-413e-bea3-d356ecb5a9cb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "71eacf4e-ebc3-4b99-a7f8-9b9920e8cb90",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1860969546.py, line 10)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[6], line 10\u001b[0;36m\u001b[0m\n\u001b[0;31m    if (abs(f(lbound)) < precision:\u001b[0m\n\u001b[0m                                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def love(f,a,b):\n",
    "    if f(a) * f(b)>=0:\n",
    "        print(\"bisection meathod fails\")\n",
    "\n",
    "\n",
    "    rbound = b\n",
    "    lbound = a\n",
    "    precision = 1e-10\n",
    "\n",
    "    if (abs(f(lbound)) < precision:\n",
    "        return round(lbound,10)\n",
    "\n",
    "    elif (abs(f(rbound)) < precision):\n",
    "        return round(rbound,10)\n",
    "\n",
    "    while (rbound-lbound) > precision:\n",
    "        bisection = (lbound+rbound)/2\n",
    "        if f(bisection) == 0\n",
    "            return round(bisection,10)\n",
    "        elif f(bisection) * f(lbound) < 0:\n",
    "        else:\n",
    "        lbound = bisection\n",
    "\n",
    "\n",
    "    return round(bisection,10)\n",
    "\n",
    "import math\n",
    "\n",
    "def f(x):\n",
    "    return math.e**x + math.log(x)\n",
    "a= 0.00000001\n",
    "b= 1\n",
    "root = roots(f,a,b)\n",
    "\n",
    "if root is not None:\n",
    "    print(\"the root is:\", root)\n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "     \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa049d3d-b614-4aac-b221-07fc51260c9c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b504daf3-4828-472e-b699-c7afdc7a969a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
